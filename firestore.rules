rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {
    function getEmployees(shopId){
    	return shopId != null
      	? get(/databases/$(database)/documents/shops/$(shopId)).data.employeeIds
      	: [];
    }

    function getUser(){
    	return get(/databases/$(database)/documents/users/$(request.auth.uid)).data;
    }
    
    function isEmployee(){
      return getUser().isEmployee;
    }
    
    function isAdmin(){
      return getUser().isAdmin;
    }

    function isOwnerOfShop(){
      return getUser().isShopOwner;
    }

    // Function to check if a string is alphanumeric, allowing characters from various languages and spaces as well as commas, dots, hyphens
    function isSafeAlphanumeric(value) {
      return value is string && value.matches('^[\\p{L}\\p{N}\\s.,-]+$');
    }

    function isSetAlready(key){
      return resource != null && key in resource.data.keys;
    }

    // for attributes that can not be overridden once set
    function canBeSet(key){
      return !isSetAlready(key);
    }

    // function goingToBeSet(key){
    //   return key in request.resource.data.keys();
    // }

    match /shops/{id} {
      function isShopOwner(){
        return request.auth.uid == resource.data.ownerId;
      }

      allow get, update: if isShopOwner();
      allow read, write: if isAdmin();
    }
    
    match /logs/{id} {
      allow read, write: if isAdmin();
    }

    match /transactions/{id} {
    	// user can read their own transactions and a valid employee can also read a users transactions
      allow read: if resource.data.userId == request.auth.uid || isEmployee()

      allow create: if request.auth.uid in getEmployees(getUser().shopId);
    }

    match /users/{id} {
      function isDocumentOwner(){
        return resource.id == request.auth.uid || request.resource.id == request.auth.uid;
      }

      function canUserBeCreated(){
        return request.auth != null && !exists(/databases/$(database)/documents/users/$(request.auth.uid));
      }

      function validateFields() {
        let user = getUser();
        let isDocumentOwner = isDocumentOwner();
        
        let data = request.resource.data;
        let keys = data.keys();

        // Return true if all validations pass
        return (
          (!keys.hasAny(['birth']) || (isDocumentOwner && canBeSet('birth') && data.birth is int)) &&
          (!keys.hasAny(['joined']) || (isDocumentOwner && canBeSet('joined') && data.joined is int)) &&
          (!keys.hasAny(['name']) || (isDocumentOwner && canBeSet('name') && isSafeAlphanumeric(data.name))) &&
          (!keys.hasAny(['value']) || 
            (isDocumentOwner && canBeSet('value') && data.value == 0) ||
            (user.isEmployee && data.value >= 0)) &&
          (!keys.hasAny(['shopId']) || 
            ((user.isShopOwner || user.isAdmin) && isSafeAlphanumeric(data.shopId))) &&
          (!keys.hasAny(['shopName']) || 
            ((user.isShopOwner || user.isAdmin) && isSafeAlphanumeric(data.shopName))) &&
          (!keys.hasAny(['isEmployee']) || 
            ((user.isShopOwner || user.isAdmin) && data.isEmployee is bool)) &&
          (!keys.hasAny(['isShopOwner']) || (user.isAdmin && data.isShopOwner is bool)) &&
          (!keys.hasAny(['isAdmin']) || (user.isAdmin && data.isAdmin is bool))
        );
      }



      // function validateFields(data) {
      //     return (
      //        && 
      //       (!('joined' in data.keys()) || canBeSet('joined') && data.joined is int) && 
      //       (!('name' in data.keys()) || canBeSet('name') && isAlphanumeric(data.name)) && 
      //       (!('value' in data.keys()) || data.value is number) && 
      //       (!('shopId' in data.keys()) || isAlphanumeric(data.shopId) || data.shopId is null) && 
      //       (!('shopName' in data.keys()) || data.shopName is string) || data.shopName is null && 
      //       (!('ownerOfShop' in data.keys()) || data.ownerOfShop is string || data.ownerOfShop is null) &&
      //       (!('isAdmin' in data.keys()) || data.isAdmin is string || data.isAdmin is null)
      //     );
      //   }

      allow get: if resource != null && (isDocumentOwner() || isEmployee())
			allow read: if isAdmin();
      allow create: if canUserBeCreated() && isDocumentOwner() && validateFields();
      allow delete: if isDocumentOwner();
      allow update: if resource != null && (isDocumentOwner() || isEmployee()) && validateFields();
    }
  }
}